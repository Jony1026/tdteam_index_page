import{_ as e,o as a,c as o,R as c}from"./chunks/framework.4SL9xGU4.js";const h=JSON.parse('{"title":"PrismTexture插件开发文档（暂废）","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md"}'),i={name:"api.md"},l=c('<h1 id="prismtexture插件开发文档-暂废" tabindex="-1">PrismTexture插件开发文档（暂废） <a class="header-anchor" href="#prismtexture插件开发文档-暂废" aria-label="Permalink to &quot;PrismTexture插件开发文档（暂废）&quot;">​</a></h1><h2 id="kaleidoscopeengine" tabindex="-1">KaleidoscopeEngine <a class="header-anchor" href="#kaleidoscopeengine" aria-label="Permalink to &quot;KaleidoscopeEngine&quot;">​</a></h2><blockquote><p>万花筒的引擎类，可以获取一些核心的类以便调用其他函数</p></blockquote><ul><li><code>GetGameSDK</code>: @class 获取游戏的SDK封装</li><li><code>GetEngineVersion</code>: @int 获取引擎版本</li><li><code>GetTexture</code>: @class 获取材质类</li></ul><h2 id="java" tabindex="-1">Java <a class="header-anchor" href="#java" aria-label="Permalink to &quot;Java&quot;">​</a></h2><ul><li><p><code>Java.available</code>: @boolean 指定当前进程是否加载了 Java VM，即Dalvik还是ART。除这种情况外，不要调用任何其他 <code>Java</code> 属性或方法</p></li><li><p><code>Java.androidVersion</code>: @string 指定运行的Android版本</p></li><li><p><code>Java.enumerateLoadedClasses(callbacks)</code>: 枚举当前加载的类，其中 <code>callbacks</code> 是一个指定以下内容的对象:</p></li><li><p><code>onMatch: function (name, handle)</code>: 一个调用</p></li><li><p>@param <code>name</code> 每个加载的类的类名，可以传递给 <code>Java.use()</code> 获取JavaScript包装器。</p></li><li><p>可以将 <code>handle</code> 转换(<code>Java.cast()</code>)为 <code>java.lang.Class</code></p></li><li><p><code>onComplete: function ()</code>: 当所有类都被枚举时调用</p></li><li><p><code>Java.enumerateLoadedClassesSync()</code>: <code>enumerateLoadedClasses()</code> 的同步版本，返回包含类名的数组</p></li><li><p><code>Java.enumerateClassLoaders(callbacks)</code>: 枚举Java VM中存在的类加载器(class loaders)，其中 <code>callbacks</code> 是一个指定以下内容的对象：</p></li><li><p><code>onMatch: function (loader)</code>: 一个调用</p></li><li><p>@param <code>loader</code> 加载的 class loader，是 特定 <code>java.lang.ClassLoader</code> 的包装</p></li><li><p><code>onComplete: function ()</code>: 当所有 class loader 都被枚举时调用</p></li></ul><p>注：可以将这样的 <code>loader</code> 传递给 <code>Java.ClassFactory.get()</code> 以便能够在指定的class loader 上 <code>.use()</code> 类</p><ul><li><p><code>Java.enumerateClassLoadersSync()</code>: 同步版本的……返回数组</p></li><li><p><code>Java.enumerateMethods(query)</code>: 列举匹配 <code>query</code> 的方法</p></li><li><p>@param <code>query</code>: 指定为 <code>&quot;class!method&quot;</code>, 允许使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noreferrer">globs</a></p></li><li><p>也可以加 <code>/</code> 和一个或多个修饰符作为后缀：</p></li><li><p><code>i</code>: 不区分大小写的匹配</p></li><li><p><code>s</code>: 包括方法签名，如 <code>&quot;putInt&quot;</code> 变成 <code>&quot;putInt(java.lang.String, int): void&quot;</code></p></li><li><p><code>u</code>: 仅用户定义的类，忽略系统类</p></li></ul><p>Java.perform(() =&gt; { const groups = Java.enumerateMethods(&#39;<em>youtube</em>!on*&#39;) console.log(JSON.stringify(groups, null, 2)); });</p><p>[ { &quot;loader&quot;: &quot;&lt;instance: java.lang.ClassLoader, $className: dalvik.system.PathClassLoader&gt;&quot;, &quot;classes&quot;: [ { &quot;name&quot;: &quot;com.google.android.apps.youtube.app.watch.nextgenwatch.ui.NextGenWatchLayout&quot;, &quot;methods&quot;: [ &quot;onAttachedToWindow&quot;, &quot;onDetachedFromWindow&quot;, &quot;onFinishInflate&quot;, &quot;onInterceptTouchEvent&quot;, &quot;onLayout&quot;, &quot;onMeasure&quot;, &quot;onSizeChanged&quot;, &quot;onTouchEvent&quot;, &quot;onViewRemoved&quot; ] }, { &quot;name&quot;: &quot;com.google.android.apps.youtube.app.search.suggest.YouTubeSuggestionProvider&quot;, &quot;methods&quot;: [ &quot;onCreate&quot; ] }, { &quot;name&quot;: &quot;com.google.android.libraries.youtube.common.ui.YouTubeButton&quot;, &quot;methods&quot;: [ &quot;onInitializeAccessibilityNodeInfo&quot; ] }, … ] } ]</p><ul><li><p><code>Java.scheduleOnMainThread(fn)</code>: 在VM的主线程上运行<code>fn</code></p></li><li><p><code>Java.perform(fn)</code>:</p></li><li><p>确保当前线程已连接到VM并调用<code>fn</code>。 （在Java的回调中这不是必需的）</p></li><li><p>如果app的类加载器尚不可用，将推迟调用 <code>fn</code></p></li><li><p>如果不需要访问app的类，请使用 <code>Java.performNow()</code></p></li></ul><p>Java.perform(function () { var Activity = Java.use(&#39;android.app.Activity&#39;); Activity.onResume.implementation = function () { send(&#39;onResume() got called! Let&#39;s call the original implementation&#39;); this.onResume(); }; });</p><ul><li><p><code>Java.performNow(fn)</code>: 确保当前线程连接到VM并调用 <code>fn</code>。（在Java的回调中这不是必需的）</p></li><li><p><code>Java.use(className)</code>:</p></li><li><p>动态获取 <code>className</code> 的JavaScript包装器</p></li><li><p>可以通过对其调用(call) <code>$new()</code>来调用(invoke)构造函数来实例化对象</p></li><li><p>对实例调用 <code>$dispose()</code> 显式清理（或等待JavaScript对象被垃圾回收，或等待脚本卸载）</p></li><li><p>静态和非静态方法都可用，甚至可以替换方法实现并从中引发异常：</p></li></ul><p>Java.perform(function () { var Activity = Java.use(&#39;android.app.Activity&#39;); var Exception = Java.use(&#39;java.lang.Exception&#39;); Activity.onResume.implementation = function () { throw Exception.$new(&#39;Oh noes!&#39;); }; });</p><blockquote><ul><li>默认情况下使用 app 的类加载器，但可以通过将不同的加载器实例分配给 <code>Java.classFactory.loader</code> 进行定制</li><li>请注意，所有方法包装器都提供了一个 <code>clone(options)</code> API，用自定义的<strong>NativeFunction</strong> opetions 创建新的方法包装器</li></ul></blockquote><ul><li><p><code>Java.openClassFile(filePath)</code>: 在 <code>filePath</code> 中打开 <code>.dex</code> 文件，使用以下方法返回一个对象：</p></li><li><p><code>load()</code>: 将包含的类加载到VM中</p></li><li><p><code>getClassNames()</code>: 获取可用类名的数组</p></li><li><p><code>Java.choose(className, callbacks)</code>: 通过扫描Java堆(heap) 来枚举 <code>className</code>类的活动实例(instance)，其中 <code>callbacks</code> 是指定以下内容的对象：</p></li><li><p><code>onMatch: function (instance)</code>: 一个调用</p></li><li><p>@param <code>instance</code>: 找到的可以使用（ready-to-use）的活动实例，就像您使用此特定实例的原始 handle 调用 <code>Java.cast()</code>一样</p></li><li><p>该函数可以返回字符串 <code>stop</code> 以尽早取消枚举</p></li><li><p><code>onComplete: function ()</code>: 列举所有实例后调用</p></li><li><p><code>Java.retain(obj)</code>: 复制JavaScript包装器 <code>obj</code>，以供以后在外部替换方法中使用</p></li></ul><p>Java.perform(function () { var Activity = Java.use(&#39;android.app.Activity&#39;); var lastActivity = null; Activity.onResume.implementation = function () { lastActivity = Java.retain(this); this.onResume(); }; });</p><ul><li><p><code>Java.cast(handle, klass)</code>: 在给定 现有实例<code>handle</code> 和 <code>klass</code> （从 <code>Java.use()</code>返回）下，创建一个JavaScript包装器，这样的包装器还有如下属性：</p></li><li><p><code>class</code>: 用于获取其类的包装器</p></li><li><p><code>$className</code>: @string 获取其类名</p></li></ul><p>var Activity = Java.use(&#39;android.app.Activity&#39;); var activity = Java.cast(ptr(&#39;0x1234&#39;), Activity);</p><ul><li><p><code>Java.array(type, elements)</code>: 创建 Java 数组，生成的Java数组的 行为(behaves)类似于JS数组，但是可以<strong>通过引用传递给Java API，以允许它们修改其内容</strong>。</p></li><li><p>@param <code>type</code>: 指定类型</p></li><li><p>@param <code>elements</code>: JavaScript 数组</p></li></ul><p>var values = Java.array(&#39;int&#39;, [ 1003, 1005, 1007 ]);</p><p>var JString = Java.use(&#39;java.lang.String&#39;); var str = JString.$new(Java.array(&#39;byte&#39;, [ 0x48, 0x65, 0x69 ]));</p><ul><li><p><code>Java.isMainThread()</code>: 确定 调用者(caller)是否正在主线程上运行</p></li><li><p><code>Java.registerClass(spec)</code>: 创建一个新的Java类并为其返回一个包装器，其中<code>spec</code>是一个包含以下内容的对象：</p></li><li><p><code>name</code>: @string 指定类的名称</p></li><li><p><code>superClass</code>: (可选) 父类。如果忽略则从 <code>java.lang.Object</code> 继承</p></li><li><p><code>implements</code>: (可选) 此类实现的接口数组</p></li><li><p><code>fields</code>: (可选) @Object 指定要公开的每个字段的名称和类型</p></li><li><p><code>methods</code>: @Object 指定要实现的对象的方法</p></li></ul><p>var SomeBaseClass = Java.use(&#39;com.example.SomeBaseClass&#39;); var X509TrustManager = Java.use(&#39;javax.net.ssl.X509TrustManager&#39;);</p><p>var MyTrustManager = Java.registerClass({ name: &#39;com.example.MyTrustManager&#39;, implements: [X509TrustManager], methods: { checkClientTrusted: function (chain, authType) { }, checkServerTrusted: function (chain, authType) { }, getAcceptedIssuers: function () { return []; }, } });</p><p>var MyWeirdTrustManager = Java.registerClass({ name: &#39;com.example.MyWeirdTrustManager&#39;, superClass: SomeBaseClass, implements: [X509TrustManager], fields: { description: &#39;java.lang.String&#39;, limit: &#39;int&#39;, }, methods: { $init: function () { console.log(&#39;Constructor called&#39;); }, checkClientTrusted: function (chain, authType) { console.log(&#39;checkClientTrusted&#39;); }, checkServerTrusted: [{ returnType: &#39;void&#39;, argumentTypes: [&#39;[Ljava.security.cert.X509Certificate;&#39;, &#39;java.lang.String&#39;], implementation: function (chain, authType) { console.log(&#39;checkServerTrusted A&#39;); } }, { returnType: &#39;java.util.List&#39;, argumentTypes: [&#39;[Ljava.security.cert.X509Certificate;&#39;, &#39;java.lang.String&#39;, &#39;java.lang.String&#39;], implementation: function (chain, authType, host) { console.log(&#39;checkServerTrusted B&#39;); return null; } }], getAcceptedIssuers: function () { console.log(&#39;getAcceptedIssuers&#39;); return []; }, } });</p><ul><li><code>Java.deoptimizeEverything()</code>: 强制 VM 使用其解释器执行所有操作</li><li>在某些情况下，为了防止 绕过(bypassing)方法 hooks 进行优化(optimization)，必须使用 ART 的 Instrumentation APIs 来跟踪 runtime</li><li><code>Java.vm</code>: @Object 带有如下方法：</li><li><code>perform(fn)</code>: 确保当前线程已连接到VM并调用<code>fn</code> （在Java回调中这不是必需的）</li><li><code>getEnv()</code>: 获取当前线程的 <code>JNIEnv</code> 的包装器。如果当前线程未附加到VM，则抛出异常</li><li><code>tryGetEnv()</code>: 尝试获取当前线程的 <code>JNIEnv</code> 的包装器。如果当前线程未附加到VM，则返回<code>null</code></li><li><code>Java.classFactory</code></li><li>用于 implement 的 默认的 class factory，如 <code>Java.use()</code></li><li>使用应用程序(application) 的主(main) 类加载器</li><li><code>Java.ClassFactory</code>: @class 具有如下属性：</li><li><code>get(classLoader)</code>: 获取给定 <code>classLoader</code> 的 class factory 实例</li><li>在后台使用的默认 class factory 只与 应用程序(application) 的 main class loader 交互</li><li>其他类加载器可以通过 <code>Java.enumerateClassLoaders()</code> 发现，通过这个API与之交互。</li><li><code>loader</code>: 只读属性</li><li>为当前使用的 class loader 提供包装</li><li>对于默认的 class factory，这是通过第一次调用 <code>Java.perform()</code> 来更新的</li><li><code>cacheDir</code>:</li><li>@string 当前正在使用的缓存目录的路径</li><li>对于默认的 class factory，这是通过第一次调用 <code>Java.perform()</code> 来更新的</li><li><code>tempFileNaming</code>: @object 指定用于临时文件的命名约定。默认为 <code>{ prefix: &#39;frida&#39;, suffix: &#39;dat&#39; }</code></li><li><code>use(className)</code>: 类似于 <code>Java.use()</code>，但针对特定的 class loader，下同</li><li><code>openClassFile(filePath)</code>: 类似于 <code>Java.openClassFile()</code></li><li><code>choose(className, callbacks)</code></li><li><code>retain(obj)</code></li><li><code>cast(handle, klass)</code></li><li><code>array(type, elements)</code></li><li><code>registerClass(spec)</code></li></ul><h2 id="gamesdk" tabindex="-1">GameSDK <a class="header-anchor" href="#gamesdk" aria-label="Permalink to &quot;GameSDK&quot;">​</a></h2><blockquote><p>游戏的SDK调用类，可用来调用游戏内的一些函数</p></blockquote><ul><li><code>jump</code>: @void 调用一次跳跃函数</li></ul><h2 id="texture" tabindex="-1">Texture <a class="header-anchor" href="#texture" aria-label="Permalink to &quot;Texture&quot;">​</a></h2><blockquote><p>材质管理器类，可对材质读取进行操作</p></blockquote><ul><li><code>getState</code>: @boolean 判断是否已经加载了第三方材质</li></ul>',33),t=[l];function d(s,n,r,p,u,v){return a(),o("div",null,t)}const g=e(i,[["render",d]]);export{h as __pageData,g as default};
