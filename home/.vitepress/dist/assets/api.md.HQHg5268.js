import{_ as e,o as i,c as t,R as o}from"./chunks/framework.4SL9xGU4.js";const b=JSON.parse('{"title":"Kaleidoscope插件开发文档","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md"}'),a={name:"api.md"},d=o('<h1 id="kaleidoscope插件开发文档" tabindex="-1">Kaleidoscope插件开发文档 <a class="header-anchor" href="#kaleidoscope插件开发文档" aria-label="Permalink to &quot;Kaleidoscope插件开发文档&quot;">​</a></h1><ul><li>Ps: undefined就是空的意思，可能为void类型函数。</li></ul><h2 id="模块-client" tabindex="-1">模块：<code>Client</code> <a class="header-anchor" href="#模块-client" aria-label="Permalink to &quot;模块：`Client`&quot;">​</a></h2><h3 id="sendclientmessage-msg" tabindex="-1"><code>sendClientMessage(msg)</code> <a class="header-anchor" href="#sendclientmessage-msg" aria-label="Permalink to &quot;`sendClientMessage(msg)`&quot;">​</a></h3><ul><li>参数：<code>msg</code> (string) - 要显示的消息。</li><li>返回类型：<code>undefined</code></li></ul><h3 id="sendactionbarmessage-msg" tabindex="-1"><code>sendActionBarMessage(msg)</code> <a class="header-anchor" href="#sendactionbarmessage-msg" aria-label="Permalink to &quot;`sendActionBarMessage(msg)`&quot;">​</a></h3><ul><li>参数：<code>msg</code> (string) - 要在动作栏显示的消息。</li><li>返回类型：<code>undefined</code></li></ul><h2 id="模块-kaleidoscope" tabindex="-1">模块：<code>Kaleidoscope</code> <a class="header-anchor" href="#模块-kaleidoscope" aria-label="Permalink to &quot;模块：`Kaleidoscope`&quot;">​</a></h2><h3 id="print-msg" tabindex="-1"><code>print(msg)</code> <a class="header-anchor" href="#print-msg" aria-label="Permalink to &quot;`print(msg)`&quot;">​</a></h3><ul><li>参数：<code>msg</code> (string) - 要记录的调试信息。</li><li>返回类型：<code>undefined</code></li></ul><h3 id="getlocalplayer" tabindex="-1"><code>getLocalPlayer()</code> <a class="header-anchor" href="#getlocalplayer" aria-label="Permalink to &quot;`getLocalPlayer()`&quot;">​</a></h3><ul><li>参数：无</li><li>返回类型：<code>int64</code> - 本地玩家对象的引用。</li></ul><h3 id="getallentities" tabindex="-1"><code>getAllEntities()</code> <a class="header-anchor" href="#getallentities" aria-label="Permalink to &quot;`getAllEntities()`&quot;">​</a></h3><ul><li>参数：无</li><li>返回类型：<code>JSValue</code> - 包含所有实体对象的数组，除了本地玩家。</li></ul><h3 id="getallplayers" tabindex="-1"><code>getAllPlayers()</code> <a class="header-anchor" href="#getallplayers" aria-label="Permalink to &quot;`getAllPlayers()`&quot;">​</a></h3><ul><li>参数：无</li><li>返回类型：<code>JSValue</code> - 包含所有玩家对象的数组，除了本地玩家。</li></ul><h2 id="模块-entity" tabindex="-1">模块：<code>Entity</code> <a class="header-anchor" href="#模块-entity" aria-label="Permalink to &quot;模块：`Entity`&quot;">​</a></h2><h3 id="getname-runtimeid" tabindex="-1"><code>getName(runtimeID)</code> <a class="header-anchor" href="#getname-runtimeid" aria-label="Permalink to &quot;`getName(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>string</code> - 实体的名称标签。</li></ul><h3 id="setmotion-runtimeid-x-y-z" tabindex="-1"><code>setMotion(runtimeID, x, y, z)</code> <a class="header-anchor" href="#setmotion-runtimeid-x-y-z" aria-label="Permalink to &quot;`setMotion(runtimeID, x, y, z)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64), <code>x</code> (double), <code>y</code> (double), <code>z</code> (double) - 实体的运行时ID和运动的坐标。</li><li>返回类型：<code>undefined</code></li></ul><h3 id="teleport-runtimeid-x-y-z" tabindex="-1"><code>teleport(runtimeID, x, y, z)</code> <a class="header-anchor" href="#teleport-runtimeid-x-y-z" aria-label="Permalink to &quot;`teleport(runtimeID, x, y, z)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64), <code>x</code> (double), <code>y</code> (double), <code>z</code> (double) - 实体的运行时ID和传送的坐标。</li><li>返回类型：<code>undefined</code></li></ul><h3 id="getpos-runtimeid" tabindex="-1"><code>getPos(runtimeID)</code> <a class="header-anchor" href="#getpos-runtimeid" aria-label="Permalink to &quot;`getPos(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>JSValue</code> - 实体的位置数组。</li></ul><h3 id="swing" tabindex="-1"><code>swing()</code> <a class="header-anchor" href="#swing" aria-label="Permalink to &quot;`swing()`&quot;">​</a></h3><ul><li>参数：无</li><li>返回类型：<code>undefined</code></li></ul><h3 id="getentitytypeid-runtimeid" tabindex="-1"><code>getEntityTypeId(runtimeID)</code> <a class="header-anchor" href="#getentitytypeid-runtimeid" aria-label="Permalink to &quot;`getEntityTypeId(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>int32</code> - 实体类型ID。</li></ul><h3 id="getmotion-runtimeid" tabindex="-1"><code>getMotion(runtimeID)</code> <a class="header-anchor" href="#getmotion-runtimeid" aria-label="Permalink to &quot;`getMotion(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>JSValue</code> - 实体的运动向量数组。</li></ul><h3 id="isinwater-runtimeid" tabindex="-1"><code>isInWater(runtimeID)</code> <a class="header-anchor" href="#isinwater-runtimeid" aria-label="Permalink to &quot;`isInWater(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>bool</code> - 表示实体是否在水中。</li></ul><h3 id="addeffect-runtimeid-potionid-duration-amplifier" tabindex="-1"><code>addEffect(runtimeID, potionId, duration, amplifier)</code> <a class="header-anchor" href="#addeffect-runtimeid-potionid-duration-amplifier" aria-label="Permalink to &quot;`addEffect(runtimeID, potionId, duration, amplifier)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64), <code>potionId</code> (int64), <code>duration</code> (int64), <code>amplifier</code> (int64) - 实体的运行时ID和药水效果的详细信息。</li><li>返回类型：<code>undefined</code></li></ul><h3 id="isinvisible-runtimeid" tabindex="-1"><code>isInVisible(runtimeID)</code> <a class="header-anchor" href="#isinvisible-runtimeid" aria-label="Permalink to &quot;`isInVisible(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>bool</code> - 表示实体是否不可见。</li></ul><h3 id="getuuid-runtimeid" tabindex="-1"><code>getUUID(runtimeID)</code> <a class="header-anchor" href="#getuuid-runtimeid" aria-label="Permalink to &quot;`getUUID(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>int64</code> - 实体的UUID。</li></ul><h3 id="isalive-runtimeid" tabindex="-1"><code>isAlive(runtimeID)</code> <a class="header-anchor" href="#isalive-runtimeid" aria-label="Permalink to &quot;`isAlive(runtimeID)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64) - 实体的运行时ID。</li><li>返回类型：<code>bool</code> - 表示实体是否存活。</li></ul><h3 id="getarmorid-runtimeid-slot" tabindex="-1"><code>getArmorID(runtimeID, slot)</code> <a class="header-anchor" href="#getarmorid-runtimeid-slot" aria-label="Permalink to &quot;`getArmorID(runtimeID, slot)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64), <code>slot</code> (int64) - 实体的运行时ID和装备槽位置。</li><li>返回类型：<code>int32</code> - 装备物品的ID。</li></ul><h3 id="getarmoritem-runtimeid-slot" tabindex="-1"><code>getArmorItem(runtimeID, slot)</code> <a class="header-anchor" href="#getarmoritem-runtimeid-slot" aria-label="Permalink to &quot;`getArmorItem(runtimeID, slot)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64), <code>slot</code> (int64) - 实体的运行时ID和装备槽位置。</li><li>返回类型：<code>int64</code> - 装备物品对象的引用。</li></ul><h3 id="setability-runtimeid-id-value" tabindex="-1"><code>setAbility(runtimeID, id, value)</code> <a class="header-anchor" href="#setability-runtimeid-id-value" aria-label="Permalink to &quot;`setAbility(runtimeID, id, value)`&quot;">​</a></h3><ul><li>参数：<code>runtimeID</code> (int64), <code>id</code> (int32), <code>value</code> (bool/double) - 实体的运行时ID，能力ID，值。</li><li>返回类型：<code>undefined</code>。</li></ul><h2 id="模块-lplayer" tabindex="-1">模块：<code>LPlayer</code> <a class="header-anchor" href="#模块-lplayer" aria-label="Permalink to &quot;模块：`LPlayer`&quot;">​</a></h2><h3 id="getyaw" tabindex="-1"><code>getYaw()</code> <a class="header-anchor" href="#getyaw" aria-label="Permalink to &quot;`getYaw()`&quot;">​</a></h3><ul><li>返回类型：<code>float64</code> 或 <code>undefined</code> - 本地玩家的Yaw值，如果没有找到本地玩家则为<code>undefined</code>。</li></ul><h3 id="getpitch" tabindex="-1"><code>getPitch()</code> <a class="header-anchor" href="#getpitch" aria-label="Permalink to &quot;`getPitch()`&quot;">​</a></h3><ul><li>返回类型：<code>float64</code> 或 <code>undefined</code> - 本地玩家的Pitch值，如果没有找到本地玩家则为<code>undefined</code>。</li></ul><h3 id="setplayergametype-gametype" tabindex="-1"><code>setPlayerGameType(gameType)</code> <a class="header-anchor" href="#setplayergametype-gametype" aria-label="Permalink to &quot;`setPlayerGameType(gameType)`&quot;">​</a></h3><ul><li>参数：<code>gameType</code> (int32) - 玩家游戏模式类型。</li><li>返回类型：<code>undefined</code> 或 <code>JS_EXCEPTION</code> - 设置成功时返回<code>undefined</code>，转换错误时返回异常。</li></ul><h3 id="setsize-width-height" tabindex="-1"><code>setSize(width, height)</code> <a class="header-anchor" href="#setsize-width-height" aria-label="Permalink to &quot;`setSize(width, height)`&quot;">​</a></h3><ul><li>参数： <ul><li><code>width</code> (float) - 玩家的宽度。</li><li><code>height</code> (float) - 玩家的高度。</li></ul></li><li>返回类型：<code>undefined</code> 或 <code>JS_EXCEPTION</code> - 设置成功时返回<code>undefined</code>，转换错误时返回异常。</li></ul><h3 id="startspinattack" tabindex="-1"><code>startSpinAttack()</code> <a class="header-anchor" href="#startspinattack" aria-label="Permalink to &quot;`startSpinAttack()`&quot;">​</a></h3><ul><li>返回类型：<code>undefined</code> - 本地玩家开始旋转攻击。</li></ul><h3 id="getselecteditem" tabindex="-1"><code>getSelectedItem()</code> <a class="header-anchor" href="#getselecteditem" aria-label="Permalink to &quot;`getSelectedItem()`&quot;">​</a></h3><ul><li>返回类型：<code>int64</code> 或 <code>undefined</code> - 返回本地玩家所选择的物品指针，如果没有选择则为<code>undefined</code>。</li></ul><h2 id="模块-item" tabindex="-1">模块：<code>Item</code> <a class="header-anchor" href="#模块-item" aria-label="Permalink to &quot;模块：`Item`&quot;">​</a></h2><h3 id="getid-item" tabindex="-1"><code>getId(item)</code> <a class="header-anchor" href="#getid-item" aria-label="Permalink to &quot;`getId(item)`&quot;">​</a></h3><ul><li>参数：<code>item</code> (int64) - 物品实例。</li><li>返回类型：<code>int32</code> 或 <code>JS_EXCEPTION</code> - 返回物品的ID，转换错误时返回异常。</li></ul><h3 id="isblock-item" tabindex="-1"><code>isBlock(item)</code> <a class="header-anchor" href="#isblock-item" aria-label="Permalink to &quot;`isBlock(item)`&quot;">​</a></h3><ul><li>参数：<code>item</code> (int64) - 物品实例。</li><li>返回类型：<code>bool</code> 或 <code>JS_EXCEPTION</code> - 返回物品是否为方块，转换错误时返回异常。</li></ul><h3 id="getcompoundtag-item" tabindex="-1"><code>getCompoundTag(item)</code> <a class="header-anchor" href="#getcompoundtag-item" aria-label="Permalink to &quot;`getCompoundTag(item)`&quot;">​</a></h3><ul><li>参数：<code>item</code> (int64) - 物品实例。</li><li>返回类型：<code>int64</code> 或 <code>JS_NULL</code> - 返回物品的复合标签指针，如果没有则为<code>JS_NULL</code>。</li></ul><h3 id="setmaxuseduration-item-duration" tabindex="-1"><code>setMaxUseDuration(item, duration)</code> <a class="header-anchor" href="#setmaxuseduration-item-duration" aria-label="Permalink to &quot;`setMaxUseDuration(item, duration)`&quot;">​</a></h3><ul><li>参数： <ul><li><code>item</code> (int64) - 物品实例。</li><li><code>duration</code> (int32) - 使用持续时间。</li></ul></li><li>返回类型：<code>undefined</code> 或 <code>JS_EXCEPTION</code> - 设置成功时返回<code>undefined</code>，转换错误时返回异常。</li></ul>',69),l=[d];function c(n,r,u,s,h,m){return i(),t("div",null,l)}const I=e(a,[["render",c]]);export{b as __pageData,I as default};
